Index: app/Http/Controllers/q3wMaterial/q3wMaterialController.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/Http/Controllers/q3wMaterial/q3wMaterialController.php b/app/Http/Controllers/q3wMaterial/q3wMaterialController.php
--- a/app/Http/Controllers/q3wMaterial/q3wMaterialController.php	(revision 18150ec0ea9e37ddb5f8ca925b34f037e18f9045)
+++ b/app/Http/Controllers/q3wMaterial/q3wMaterialController.php	(revision 59cd4f1a598f0e15840109be8472aec66b7199db)
@@ -32,7 +32,7 @@
     public function index(Request $request)
     {
         $projectObjectId = (new UsersSetting)->getSetting('material_accounting_last_project_object_id');
-        if (!isset($projectObjectId)){
+        if (!isset($projectObjectId)) {
             $projectObjectId = $request->project_object ?? ProjectObject::whereNotNull('short_name')
                     ->where('is_participates_in_material_accounting', '=', 1)
                     ->orderBy("short_name")
@@ -67,7 +67,7 @@
             'materialStandards' => q3wMaterialStandard::all('id', 'name')->toJson(JSON_UNESCAPED_UNICODE),
             'projectObjects' => ProjectObject::all('id', 'name', 'short_name', 'address')->toJson(JSON_UNESCAPED_UNICODE),
             'projectObjectId' => $projectObjectId
-            ]);
+        ]);
     }
 
     public function remains(Request $request)
@@ -77,7 +77,7 @@
                 ->get(['id'])
                 ->first()->id;
 
-        if (isset($request->requestedDate)){
+        if (isset($request->requestedDate)) {
             $requestedDate = $request->requestedDate;
         } else {
             $requestedDate = Carbon::today()->format('Y-m-d');
@@ -108,7 +108,7 @@
             ->toJson(JSON_UNESCAPED_UNICODE);
     }
 
-     /**
+    /**
      * Display the specified resource snapshot.
      *
      * @param Request $request
@@ -135,7 +135,8 @@
             ->toJSON();
     }
 
-    public function actualProjectObjectMaterialsList(Request $request){
+    public function actualProjectObjectMaterialsList(Request $request)
+    {
         if (isset($request->project_object)) {
             $projectObjectId = $request->project_object;
         } else {
@@ -199,8 +200,8 @@
                 DB::Raw("GROUP_CONCAT(DISTINCT `g`.`brand_id` SEPARATOR ',') as standard_brands")])
             ->toArray();
 
-        foreach ($activeOperationMaterials as $operationMaterial){
-            foreach ($materials as $material){
+        foreach ($activeOperationMaterials as $operationMaterial) {
+            foreach ($materials as $material) {
                 switch ($operationMaterial->accounting_type) {
                     case 2:
                         if (($operationMaterial->standard_id == $material->standard_id)
@@ -223,13 +224,14 @@
         return json_encode($materials, JSON_NUMERIC_CHECK | JSON_UNESCAPED_UNICODE);
     }
 
-    public function allProjectObjectMaterialsWithActualAmountList(Request $request){
+    public function allProjectObjectMaterialsWithActualAmountList(Request $request)
+    {
         $projectObjectId = $request->project_object ?? ProjectObject::whereNotNull('short_name')->get(['id'])->first()->id;
 
         return DB::table('q3w_material_standards as a')
-            ->leftJoin('q3w_materials as b', function($join) use ($projectObjectId) {
+            ->leftJoin('q3w_materials as b', function ($join) use ($projectObjectId) {
                 $join->on('a.id', '=', 'b.standard_id');
-                $join->on('b.project_object','=',   DB::RAW($projectObjectId));
+                $join->on('b.project_object', '=', DB::RAW($projectObjectId));
             })
             ->leftJoin('q3w_material_types as d', 'a.material_type', '=', 'd.id')
             ->leftJoin('q3w_measure_units as e', 'd.measure_unit', '=', 'e.id')
@@ -237,20 +239,20 @@
             ->orderBy('a.selection_counter', 'desc')
             ->orderBy('a.name')
             ->get([DB::Raw('UUID() as `id`'),
-                    'a.id as standard_id',
-                    'a.name as standard_name',
-                    'b.amount',
-                    'b.quantity',
-                    'a.material_type',
-                    'a.weight',
-                    'd.accounting_type',
-                    'd.measure_unit',
-                    'd.name as material_type_name',
-                    'e.value as measure_unit_value',
-                    'b.comment_id as initial_comment_id',
-                    'b.comment_id as comment_id',
-                    'f.comment as initial_comment',
-                    'f.comment as comment',
+                'a.id as standard_id',
+                'a.name as standard_name',
+                'b.amount',
+                'b.quantity',
+                'a.material_type',
+                'a.weight',
+                'd.accounting_type',
+                'd.measure_unit',
+                'd.name as material_type_name',
+                'e.value as measure_unit_value',
+                'b.comment_id as initial_comment_id',
+                'b.comment_id as comment_id',
+                'f.comment as initial_comment',
+                'f.comment as comment',
                 DB::RAW('0 as from_operation')])
             ->toJSON(JSON_NUMERIC_CHECK | JSON_UNESCAPED_UNICODE);
     }
@@ -319,8 +321,8 @@
                 DB::RAW('0 as from_operation')])
             ->toArray();
 
-        foreach ($activeOperationMaterials as $operationMaterial){
-            foreach ($materials as $material){
+        foreach ($activeOperationMaterials as $operationMaterial) {
+            foreach ($materials as $material) {
                 switch ($operationMaterial->accounting_type) {
                     case 2:
                         if (($operationMaterial->standard_id == $material->standard_id)
@@ -406,11 +408,12 @@
                 'i.short_name as contractor_short_name',
                 'j.name as route_name',
                 'k.value as transformation_type_value'
-                ])
+            ])
             ->toJSON(JSON_NUMERIC_CHECK | JSON_UNESCAPED_UNICODE);
     }
 
-    public function reservedMaterialsList(Request $request) {
+    public function reservedMaterialsList(Request $request)
+    {
         $projectObjectId = $request->project_object ?? ProjectObject::whereNotNull('short_name')->get(['id'])->first()->id;
 
         return DB::table('q3w_operation_materials as a')
@@ -440,7 +443,8 @@
             ->toJSON(JSON_NUMERIC_CHECK | JSON_UNESCAPED_UNICODE);
     }
 
-    public function getMaterialTableQuery($projectObjectId, $filterOptions) {
+    public function getMaterialTableQuery($projectObjectId, $filterOptions)
+    {
         return (new q3wMaterialOperation)
             ->dxLoadOptions($filterOptions, true)
             ->leftJoin('q3w_operation_materials', 'q3w_operation_materials.material_operation_id', '=', 'q3w_material_operations.id')
@@ -455,7 +459,7 @@
             ->leftJoin('q3w_material_transformation_types', 'q3w_material_operations.transformation_type_id', '=', 'q3w_material_transformation_types.id')
             ->whereIn('q3w_material_operations.operation_route_stage_id', q3wOperationRouteStage::completed()->pluck('id'))
             ->where('amount', '<>', '0')
-            ->where(function ($query) use ($projectObjectId){
+            ->where(function ($query) use ($projectObjectId) {
                 $query->where('q3w_material_operations.source_project_object_id', '=', $projectObjectId)
                     ->orWhere('q3w_material_operations.destination_project_object_id', '=', $projectObjectId);
             })
@@ -488,9 +492,9 @@
                 DB::Raw('ROUND(`q3w_operation_materials`.`quantity` * `q3w_operation_materials`.`amount`, 2) AS `total_quantity`'),
                 DB::Raw('ROUND(`q3w_operation_materials`.`quantity` * `q3w_operation_materials`.`amount` * q3w_material_standards.weight, 3) AS `weight`'),
                 DB::Raw('CASE WHEN `q3w_material_operations`.`operation_route_id` = 1 THEN `contractors`.`short_name`
-                          WHEN `q3w_material_operations`.`operation_route_id` = 2 THEN IF(`destination_project_object_id` = '.$projectObjectId.', `source_project_objects`.`short_name`, NULL)
+                          WHEN `q3w_material_operations`.`operation_route_id` = 2 THEN IF(`destination_project_object_id` = ' . $projectObjectId . ', `source_project_objects`.`short_name`, NULL)
                         END AS `coming_from_project_object`'),
-                DB::Raw('IF(`source_project_object_id` = '.$projectObjectId.', `destination_project_objects`.`short_name`, NULL) AS `outgoing_to_project_object`'),
+                DB::Raw('IF(`source_project_object_id` = ' . $projectObjectId . ', `destination_project_objects`.`short_name`, NULL) AS `outgoing_to_project_object`'),
                 'q3w_operation_material_comments.comment',
                 DB::Raw('IF(`q3w_material_operations`.`operation_route_id` = 1, `q3w_material_operations`.`consignment_note_number`, NULL) AS `item_transport_consignment_note_number`'),
                 DB::Raw('IF(`q3w_material_operations`.`operation_route_id` = 2, `q3w_material_operations`.`consignment_note_number`, NULL) AS `consignment_note_number`')
@@ -512,13 +516,14 @@
             ->count();
 
         return json_encode(array(
-                "data" => $materialsList,
-                "totalCount" => $totalCount
-            ),
+            "data" => $materialsList,
+            "totalCount" => $totalCount
+        ),
             JSON_UNESCAPED_UNICODE | JSON_NUMERIC_CHECK);
     }
 
-    public function printMaterialsTable(Request $request) {
+    public function printMaterialsTable(Request $request)
+    {
         $filterText = json_decode($request->input('filterList'));
         $options = json_decode($request['filterOptions']);
         $projectObjectId = json_decode($request["projectObjectId"]);
@@ -530,28 +535,11 @@
         return (new MaterialTableXLSXReport($projectObjectId, $materialsList, $filterText, null))->export();
     }
 
-    public function getMaterialRemainsQuery($projectObjectId, $date, $filterOptions){
+    public function getMaterialRemainsQuery($projectObjectId, $date, $filterOptions)
+    {
         return (new q3wMaterialStandard)
             ->dxLoadOptions($filterOptions, true)
             ->leftJoin(DB::Raw("(SELECT
-                                      `snapshots`.`project_object_id`,
-                                      `q3w_material_snapshot_materials`.`standard_id`,
-                                      SUM(`amount`) AS `amount_remains`,
-                                      SUM(`amount` * `quantity`) AS `quantity_remains`
-                                    FROM `q3w_material_snapshot_materials`
-                                      LEFT JOIN (SELECT DISTINCT
-                                          MAX(`q3w_material_snapshots`.`id`) OVER (PARTITION BY `project_object_id`) AS `max_snapshot_id`,
-                                          `project_object_id`
-                                        FROM `q3w_material_snapshots`
-                                            LEFT JOIN q3w_material_operations
-                                                ON `q3w_material_snapshots`.`operation_id` = `q3w_material_operations`.`id`
-                                        WHERE DATE(`operation_date`) <= DATE('$date')) AS `snapshots`
-                                        ON `q3w_material_snapshot_materials`.`snapshot_id` = `snapshots`.`max_snapshot_id`
-                                    WHERE `snapshots`.`project_object_id` IS NOT NULL
-                                    AND `project_object_id` = '$projectObjectId'
-                                    GROUP BY `project_object_id`,
-                                             standard_id) AS material_remains"), 'material_remains.standard_id', '=', 'q3w_material_standards.id')
-            ->leftJoin(DB::Raw("(SELECT
                                           `source_project_object_id`,
                                           `destination_project_object_id`,
                                           `standard_id`,
@@ -564,9 +552,13 @@
                                             ON `q3w_operation_materials`.`standard_id` = `q3w_material_standards`.`id`
                                           LEFT JOIN `q3w_operation_route_stages`
                                             ON `q3w_material_operations`.`operation_route_stage_id` = `q3w_operation_route_stages`.`id`
-                                        WHERE (`q3w_material_operations`.`operation_route_id` IN (1, 2)
-                                        AND `destination_project_object_id` = '$projectObjectId'
-                                        AND DATE(`operation_date`) <= DATE('$date'))
+                                        WHERE ((`q3w_material_operations`.`operation_route_id` IN (1, 2)
+                                            AND `destination_project_object_id` = '$projectObjectId')
+                                           OR (`q3w_material_operations`.`operation_route_id` IN (3) and
+                                               `source_project_object_id` = '$projectObjectId' and
+                                               `q3w_operation_materials`.`transform_operation_stage_id` in (2, 3)))
+                                        AND DATE(`operation_date`) <= DATE('$date')
+                                        AND NOT IFNULL(JSON_CONTAINS(`edit_states`, json_array('deletedByRecipient')), 0)
                                         AND `q3w_operation_route_stages`.`operation_route_stage_type_id` = 2
                                         GROUP BY `destination_project_object_id`,
                                                  `standard_id`) AS `coming_to_materials`"), 'coming_to_materials.standard_id', '=', 'q3w_material_standards.id')
@@ -583,16 +575,19 @@
                                             ON `q3w_operation_materials`.`standard_id` = `q3w_material_standards`.`id`
                                           LEFT JOIN `q3w_operation_route_stages`
                                             ON `q3w_material_operations`.`operation_route_stage_id` = `q3w_operation_route_stages`.`id`
-                                        WHERE (`q3w_material_operations`.`operation_route_id` IN (2, 4)
-                                        AND `source_project_object_id` = '$projectObjectId'
-                                        AND DATE(`operation_date`) <= DATE('$date'))
+                                        WHERE ((`q3w_material_operations`.`operation_route_id` IN (2, 4)
+                                            AND `source_project_object_id` = '$projectObjectId')
+                                           OR (`q3w_material_operations`.`operation_route_id` IN (3) and
+                                               `source_project_object_id` = '$projectObjectId' and
+                                               `q3w_operation_materials`.`transform_operation_stage_id` in (1, 4)))
+                                        AND DATE(`operation_date`) <= DATE('$date')
                                         AND `q3w_operation_route_stages`.`operation_route_stage_type_id` = 2
+                                        AND NOT IFNULL(JSON_CONTAINS(`edit_states`, json_array('deletedByRecipient')), 0)
                                         GROUP BY `source_project_object_id`,
                                                  `standard_id`) AS `outgoing_materials`"), 'outgoing_materials.standard_id', '=', 'q3w_material_standards.id')
             ->leftJoin('q3w_material_types', 'q3w_material_types.id', '=', 'q3w_material_standards.material_type')
-            ->where(function ($query){
-                 $query->whereNotNull('material_remains.project_object_id')
-                    ->orWhereNotNull('coming_to_materials.destination_project_object_id')
+            ->where(function ($query) {
+                $query->orWhereNotNull('coming_to_materials.destination_project_object_id')
                     ->orWhereNotNull('outgoing_materials.source_project_object_id');
             })
             ->select([
@@ -604,15 +599,14 @@
                 DB::raw('IFNULL(round((`coming_to_material_quantity` * `q3w_material_standards`.`weight`), 3), 0) as `coming_to_material_weight`'),
                 DB::raw('IFNULL(CASE WHEN `q3w_material_types`.`accounting_type` = 1 AND `outgoing_material_amount` > 1 THEN 1 ELSE `outgoing_material_amount` END, 0) as `outgoing_material_amount`'),
                 DB::raw('IFNULL(`outgoing_material_quantity`, 0) as `outgoing_material_quantity`'),
-                DB::raw('IFNULL(round((`outgoing_material_quantity` * `q3w_material_standards`.`weight`), 3), 0) as `outgoing_material_material_weight`'),
-                DB::raw('IFNULL(CASE WHEN `accounting_type` = 1 AND `amount_remains` > 1 THEN 1 WHEN `accounting_type` = 1 AND `amount_remains` >= 1 AND `quantity_remains` = 0 THEN 0 ELSE `amount_remains` END, 0) as `amount_remains_from_snapshot`'),
-                DB::raw('IFNULL(`quantity_remains`, 0) as `quantity_remains_from_snapshot`'),
-                DB::raw('IFNULL(round((`quantity_remains` * `q3w_material_standards`.`weight`), 3), 0) as `weight_remains_from_snapshot`')])
+                DB::raw('IFNULL(round((`outgoing_material_quantity` * `q3w_material_standards`.`weight`), 3), 0) as `outgoing_material_material_weight`')
+            ])
             ->orderBy('q3w_material_standards.material_type')
             ->orderBy('q3w_material_standards.name');
     }
 
-    public function materialRemainsList(Request $request): string {
+    public function materialRemainsList(Request $request): string
+    {
         $options = json_decode($request['data']);
         $projectObjectId = $request["projectObjectId"];
         $requestedDate = $request["requestedDate"];
@@ -627,7 +621,8 @@
             JSON_UNESCAPED_UNICODE | JSON_NUMERIC_CHECK);
     }
 
-    public function exportMaterialRemains(Request $request) {
+    public function exportMaterialRemains(Request $request)
+    {
         $filterText = json_decode($request->input('filterList'));
         $options = json_decode($request['filterOptions']);
         $projectObjectId = json_decode($request["projectObjectId"]);
Index: resources/views/materials/material-remains.blade.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/resources/views/materials/material-remains.blade.php b/resources/views/materials/material-remains.blade.php
--- a/resources/views/materials/material-remains.blade.php	(revision 18150ec0ea9e37ddb5f8ca925b34f037e18f9045)
+++ b/resources/views/materials/material-remains.blade.php	(revision 59cd4f1a598f0e15840109be8472aec66b7199db)
@@ -149,7 +149,7 @@
                 items: [
                     {
                         itemType: "group",
-                        caption: "Табель учета материалов",
+                        caption: "Остатки материалов",
                         cssClass: "material-snapshot-grid",
                         items: [{
                             name: "materialsRemainsGrid",
@@ -238,17 +238,17 @@
                                                 dataField: "amount_remains",
                                                 cellTemplate: getCellTemplate,
                                                 calculateCellValue: function(rowData) {
-                                                    let amountRemainsWeigth = rowData.coming_to_material_weight - rowData.outgoing_material_material_weight;
+                                                    let amountRemainsWeight = rowData.coming_to_material_weight - rowData.outgoing_material_material_weight;
 
                                                     switch (rowData.accounting_type) {
-                                                        case 1:
-                                                            if (round((rowData.coming_to_material_weight - rowData.outgoing_material_material_weight)/1000)*1000 !== 0) {
+                                                        case 2:
+                                                            return rowData.coming_to_material_amount - rowData.outgoing_material_amount;
+                                                        default:
+                                                            if (Math.round((rowData.coming_to_material_weight - rowData.outgoing_material_material_weight)*1000)/1000 !== 0) {
                                                                 return 1
                                                             } else {
                                                                 return 0
                                                             }
-                                                        default:
-                                                            return rowData.coming_to_material_amount - rowData.outgoing_material_amount;
                                                     }
                                                 }
                                             },
